<h1>Room: <%= @room_name %></h1> <%# Passed from controller %>

<div id="livekit-container">
  <div id="video-grid">
    <%# Participant videos/placeholders will be added here by JS %>
  </div>
  <div id="controls">
    <button id="mic-button" class="custom-button">Mute Mic</button>
    <button id="video-button" class="custom-button">Stop Video</button>
    <button id="leave-button" class="custom-button">Leave Room</button> <%# FR2.3 %>
  </div>
  <div id="chat-container"> <%# FR2.6 %>
     <div id="chat-messages"></div>
     <input type="text" id="chat-input" placeholder="Type message...">
     <button id="send-chat-button" class="custom-button >Send</button>
  </div>
   <div id="stats-container"> <%# NFR1.2 %>
    <%# WebRTC stats will be displayed here %>
  </div>
</div>

<%# Include LiveKit Client SDK (choose one method) %>
<%# Method 1: Via CDN (simple for start) %>
<script src="https://cdn.jsdelivr.net/npm/livekit-client/dist/livekit-client.umd.min.js"></script>

<%# Method 2: Via import maps (if you configured Rails 7+ with it) %>
<%# bin/importmap pin livekit-client %>
<%# import { Room, RoomEvent } from 'livekit-client'; %>

<%# Method 3: Via esbuild/bundler (if configured) %>
<%# yarn add livekit-client %>
<%# import { Room, RoomEvent } from 'livekit-client'; in your app/javascript/application.js or specific pack %>

<script>
  const roomName = "<%= @room_name %>";
  const livekitUrl = "<%= ENV['LIVEKIT_URL'] %>"; // The WSS/WS URL for clients
  const videoGrid = document.getElementById('video-grid');
  const micButton = document.getElementById('mic-button');
  const videoButton = document.getElementById('video-button');
  const leaveButton = document.getElementById('leave-button');
  // Add chat elements...

  let currentRoom = null;

  // Function to fetch token from our Rails backend
  async function fetchToken() {
    try {
      // Use the route we defined: POST /rooms/:id/token
      const response = await fetch(`/rooms/${encodeURIComponent(roomName)}/token`, {
          method: 'POST',
          headers: {
            // Rails CSRF token - IMPORTANT!
            'X-CSRF-Token': document.querySelector("[name='csrf-token']").content,
            'Accept': 'application/json'
           }
      });
      if (!response.ok) {
         const errorData = await response.json();
         throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log("Received token:", data.token); // Log token for debugging
      return data.token;
    } catch (error) {
       console.error("Failed to fetch token:", error);
       alert(`Failed to get connection token: ${error.message}`);
       return null;
    }
  }

  // Function to connect to LiveKit
  async function connectToRoom() {
    const token = await fetchToken();
    if (!token) return;

    const room = new LivekitClient.Room({
      // Options for audio/video capture can be set here (FR2.4, FR2.5 prompts)
       adaptiveStream: true,
       dynacast: true,
       videoCaptureDefaults: { resolution: LivekitClient.VideoPresets.h720.resolution },
       // Add more options as needed
    });

    currentRoom = room; // Store room reference

    // Setup event listeners BEFORE connecting
    setupRoomListeners(room);
    
    // Pre-warm connection for faster setup
    room.prepareConnection(livekitUrl, token);
    console.log("Connection pre-warmed");

    try {
       // Prompt user for audio/video before connecting if desired
       // This is often handled by browser permissions popup anyway
       console.log(`Attempting to connect to room: ${roomName} at ${livekitUrl}`);
       await room.connect(livekitUrl, token, {
         // Request permissions immediately, adjust as needed
         // autoSubscribe: true // Usually default
       });
       console.log('Connected to room:', room.name);

       // Publish local tracks (mic/camera) using the recommended method
       await room.localParticipant.enableCameraAndMicrophone();
       updateControlsUI(); // Set initial button states

    } catch (error) {
       console.error("Failed to connect to LiveKit room:", error);
       alert(`Could not connect to the room: ${error.message}`);
       currentRoom = null; // Clear room reference on failure
    }
  }

  // Function to handle room events (participants joining/leaving, tracks published, etc.)
  function setupRoomListeners(room) {
    room
      .on(LivekitClient.RoomEvent.ParticipantConnected, handleParticipantConnected)
      .on(LivekitClient.RoomEvent.ParticipantDisconnected, handleParticipantDisconnected)
      .on(LivekitClient.RoomEvent.LocalTrackPublished, handleLocalTrackPublished)
      .on(LivekitClient.RoomEvent.LocalTrackUnpublished, handleLocalTrackUnpublished)
      .on(LivekitClient.RoomEvent.TrackSubscribed, handleTrackSubscribed)
      .on(LivekitClient.RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed)
      .on(LivekitClient.RoomEvent.DataReceived, handleDataReceived) // For chat FR2.6
      .on(LivekitClient.RoomEvent.Disconnected, handleDisconnect)
      .on(LivekitClient.RoomEvent.ConnectionQualityChanged, handleConnectionQuality); // NFR1.2

    // // Handle existing participants already in the room when joining
    // room.participants.forEach(handleParticipantConnected);
    // handleParticipantConnected(room.localParticipant); // Handle local participant too

    // Add a check for participants collection before using forEach
    if (room.participants && room.participants.size > 0) {
      // Using entries() because participants is likely a Map, not an array
      Array.from(room.participants.values()).forEach(handleParticipantConnected);
    }
    
    // Also check if localParticipant exists
    if (room.localParticipant) {
      handleParticipantConnected(room.localParticipant);
    }
  }

  // --- Handler Functions (Implement these based on LiveKit Docs) ---

  function handleParticipantConnected(participant) {
    console.log(`Participant connected: ${participant.identity}`);
    const participantDiv = document.createElement('div');
    participantDiv.id = `participant-${participant.sid}`;
    participantDiv.classList.add('participant');
    participantDiv.innerHTML = `
        <div class="video-container" id="video-container-${participant.sid}"></div>
        <div class="audio-container" id="audio-container-${participant.sid}"></div>
        <div class="identity">${participant.identity}</div>
        <div class="stats" id="stats-${participant.sid}"></div>
    `;
    videoGrid.appendChild(participantDiv);

    // Attach existing tracks 
  if (participant.trackPublications) {
    // Using the Map values properly
    Array.from(participant.trackPublications.values()).forEach(publication => {
      if (publication.isSubscribed && publication.track) {
        handleTrackSubscribed(publication.track, publication, participant);
      }
    });
  }
    
    // Listen for future tracks
    participant.on(LivekitClient.TrackEvent.TrackSubscribed, (track, publication) => handleTrackSubscribed(track, publication, participant));
    participant.on(LivekitClient.TrackEvent.TrackUnsubscribed, (track, publication) => handleTrackUnsubscribed(track, publication, participant));
    updatePlaceholderVisibility(participant);
  }

  function handleParticipantDisconnected(participant) {
    console.log(`Participant disconnected: ${participant.identity}`);
    const participantDiv = document.getElementById(`participant-${participant.sid}`);
    if (participantDiv) {
      participantDiv.remove();
    }
  }

  function handleLocalTrackPublished(publication, participant) {
      console.log(`Local track published: ${publication.kind}`);
      if (publication.track) {
          handleTrackSubscribed(publication.track, publication, participant);
      }
      updateControlsUI();
      updatePlaceholderVisibility(participant);
  }

  function handleLocalTrackUnpublished(publication, participant) {
      console.log(`Local track unpublished: ${publication.kind}`);
      handleTrackUnsubscribed(publication.track, publication, participant)
      updateControlsUI();
      updatePlaceholderVisibility(participant);
  }


  function handleTrackSubscribed(track, publication, participant) {
    console.log(`Track subscribed: ${track.kind} from ${participant.identity}, track ID: ${track.sid}`);
    
    // Check if participant div exists first
    let participantDiv = document.getElementById(`participant-${participant.sid}`);
    if (!participantDiv) {
      // If it doesn't exist yet, create it
      handleParticipantConnected(participant);
    }

    // Use the official LiveKit method to attach tracks
    const element = track.attach();
    
    // Add appropriate styling based on track type
    if (track.kind === 'video') {
      element.width = 320;
      element.height = 240;
      element.autoplay = true;
      element.playsinline = true;
      element.muted = true;
      element.id = `video-${participant.sid}`;
      document.getElementById(`video-container-${participant.sid}`).appendChild(element);
    } else if (track.kind === 'audio') {
      element.autoplay = true;
      element.id = `audio-${participant.sid}`;
      if (participant.isLocal) element.muted = true;
      document.getElementById(`audio-container-${participant.sid}`).appendChild(element);
    }
    
    updatePlaceholderVisibility(participant);
  }

  function handleTrackUnsubscribed(track, publication, participant) {
    console.log(`Track unsubscribed: ${track.kind} from ${participant.identity}`);
    
    // Use the official LiveKit method to detach tracks
    if (track) {
      track.detach();
    }
    
    updatePlaceholderVisibility(participant);
  }

function handleDataReceived(payload, participant) {
  // FR2.6 Chat message handling
  const decoder = new TextDecoder();
  let message = decoder.decode(payload);
  let displayMessage = message;
  
  // Try to parse as JSON if it looks like JSON
  if (message.trim().startsWith('{') && message.trim().endsWith('}')) {
    try {
      const jsonData = JSON.parse(message);
      // Extract the actual message content if available
      if (jsonData.message) {
        displayMessage = jsonData.message;
      }
    } catch (e) {
      // If parsing fails, use the original message
      console.log('Failed to parse message as JSON:', e);
    }
  }
  
  const chatMessages = document.getElementById('chat-messages');
  const messageElement = document.createElement('div');
  messageElement.textContent = `${participant ? participant.identity : 'System'}: ${displayMessage}`;
  chatMessages.appendChild(messageElement);
  chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to bottom
}

  function handleDisconnect() {
    console.log('Disconnected from room.');
    alert('You have been disconnected.');
    // Clean up UI, maybe redirect
    videoGrid.innerHTML = ''; // Clear grid
    currentRoom = null;
     // Maybe redirect: window.location.href = "/";
  }

  function handleConnectionQuality(quality, participant) {
      // NFR1.2 Display connection quality
      console.log(`Connection quality for ${participant.identity}: ${LivekitClient.ConnectionQuality[quality]}`);
      const statsDiv = document.getElementById(`stats-${participant.sid}`);
      if (statsDiv) {
          statsDiv.textContent = `Quality: ${LivekitClient.ConnectionQuality[quality]}`;
          // You can get more detailed stats (RTT, jitter, packet loss) from room.participants or specific tracks
          // Example: participant.tracks.forEach(pub => { if(pub.track) console.log(pub.track.codec, pub.track.bitrate) });
          // Displaying detailed WebRTC RTT might require digging into stats - check LiveKit SDK docs/examples
      }
  }


 function updatePlaceholderVisibility(participant) {
     // NFR1.4 Show placeholder if video is disabled/unavailable
     const videoContainer = document.getElementById(`video-container-${participant.sid}`);
     const placeholderElement = document.getElementById(`placeholder-${participant.sid}`);
     if (!videoContainer || !placeholderElement) return;

     const videoTrack = participant.getTrackPublication(LivekitClient.Track.Source.Camera);
     const isVideoAvailable = videoTrack && videoTrack.isSubscribed && !videoTrack.isMuted;
     const videoElement = document.getElementById(`video-${participant.sid}`);

     console.log(`Video status for ${participant.identity}: available=${isVideoAvailable}, track=${videoTrack ? 'exists' : 'none'}`);

     if (isVideoAvailable && videoElement) {
       placeholderElement.style.display = 'none';
       videoElement.style.display = 'block';
     } else {
       if (videoElement) videoElement.style.display = 'none';
       placeholderElement.style.display = 'block';
     }
 }


  // --- Control Button Logic ---

  micButton.onclick = async () => {
    if (!currentRoom) return;
    const enabled = currentRoom.localParticipant.isMicrophoneEnabled;
    // This call is asyync, and we need to force the code to wait until it's complete. 
    // Otherwise we'll get logic issues in updateControlsUI which will be called before the mic is actually muted/unmuted.
    await currentRoom.localParticipant.setMicrophoneEnabled(!enabled);
    updateControlsUI();
  };

  videoButton.onclick = async () => {
    if (!currentRoom) return;
    const enabled = currentRoom.localParticipant.isCameraEnabled;
    await currentRoom.localParticipant.setCameraEnabled(!enabled);
    updateControlsUI();
  };

  leaveButton.onclick = () => { // FR2.3
    if (currentRoom) {
      currentRoom.disconnect();
    }
  };

  // FR2.6 Chat Send Button
  const chatInput = document.getElementById('chat-input');
  const sendChatButton = document.getElementById('send-chat-button');
  sendChatButton.onclick = () => {
    if (currentRoom && chatInput.value) {
        // Create a simple message structure
        const messageData = {
            id: crypto.randomUUID(),
            timestamp: Date.now(),
            message: chatInput.value
        };
        
        // Convert to string before encoding
        const message = new TextEncoder().encode(JSON.stringify(messageData));
        
        // Send reliably to all participants
        currentRoom.localParticipant.publishData(message, LivekitClient.DataPacket_Kind.RELIABLE);
        
        // Display own message locally
        handleDataReceived(message, currentRoom.localParticipant);
        chatInput.value = '';
    }
};
  chatInput.addEventListener('keypress', (event) => {
     if (event.key === 'Enter') {
       event.preventDefault(); // Prevent form submission if it's in a form
       sendChatButton.click();
     }
  });

  function updateControlsUI() {
     if (!currentRoom) return;
     micButton.textContent = currentRoom.localParticipant.isMicrophoneEnabled ? 'Mute Mic' : 'Unmute Mic';
     videoButton.textContent = currentRoom.localParticipant.isCameraEnabled ? 'Stop Video' : 'Start Video';
     // Update placeholders for local participant
     updatePlaceholderVisibility(currentRoom.localParticipant);
  }

  // --- Initial connection ---
  connectToRoom();

</script>